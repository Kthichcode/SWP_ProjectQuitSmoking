import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import '../assets/CSS/Register.css';
import Modal from '../components/Modal';
import '../components/Modal.css';
import { FiEye, FiEyeOff } from 'react-icons/fi';

function Register() {
  const { login } = useAuth();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    name: '',
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
    agree: false,
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [showTermsModal, setShowTermsModal] = useState(false);
  const [showPrivacyModal, setShowPrivacyModal] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [passwordLengthError, setPasswordLengthError] = useState('');
  const [validationErrors, setValidationErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    // Validate on change
    if (name === 'name') {
      let error = '';
      // Ch·ªâ ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng khi nh·∫≠p
      setValidationErrors(prev => ({ ...prev, name: error }));
    }

    if (name === 'username') {
      let error = '';
      if (value.length < 5) error = 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±.';
      else if (/\s/.test(value)) error = 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ch·ª©a d·∫•u c√°ch.';
      else if (!/^[a-zA-Z0-9]+$/.test(value)) error = 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát.';
      setValidationErrors(prev => ({ ...prev, username: error }));
    }

    if (name === 'email') {
      let error = '';
      if (value && !value.includes('@')) error = 'Email ph·∫£i c√≥ d·∫•u @.';
      setValidationErrors(prev => ({ ...prev, email: error }));
    }

    if (name === 'password') {
      let error = '';
      if (value.length < 6) error = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.';
      setValidationErrors(prev => ({ ...prev, password: error }));
    }

    if (name === 'confirmPassword') {
      let error = '';
      if (value !== formData.password) error = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp.';
      setValidationErrors(prev => ({ ...prev, confirmPassword: error }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSuccessMessage('');
    setErrorMessage('');
    setPasswordLengthError('');

    // Validate all fields
    const errors = {};
    
    // Validate name
    if (!formData.name) {
      errors.name = 'H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng.';
    }
    
    // Validate username
    if (!formData.username) {
      errors.username = 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng.';
    } else if (formData.username.length < 5) {
      errors.username = 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±.';
    } else if (/\s/.test(formData.username)) {
      errors.username = 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ch·ª©a d·∫•u c√°ch.';
    } else if (!/^[a-zA-Z0-9]+$/.test(formData.username)) {
      errors.username = 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát.';
    }

    // Validate email
    if (!formData.email) {
      errors.email = 'Email kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng.';
    } else if (!formData.email.includes('@')) {
      errors.email = 'Email ph·∫£i c√≥ d·∫•u @.';
    }

    // Validate password
    if (!formData.password) {
      errors.password = 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng.';
    } else if (formData.password.length < 6) {
      errors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.';
    }

    // Validate confirm password
    if (!formData.confirmPassword) {
      errors.confirmPassword = 'X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng.';
    } else if (formData.password !== formData.confirmPassword) {
      errors.confirmPassword = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp.';
    }

    // Check agreement
    if (!formData.agree) {
      errors.agree = 'B·∫°n ch∆∞a ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n.';
    }

    setValidationErrors(errors);

    // If there are errors, don't submit
    if (Object.keys(errors).length > 0) {
      return;
    }

    const payload = {
      fullName: formData.name,
      username: formData.username,
      email: formData.email,
      password: formData.password
    };

    try {
      const res = await fetch('http://localhost:5175/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const data = await res.json();
      if (res.ok) {
        setSuccessMessage("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...");
        setTimeout(() => navigate('/login'), 1800);
      } else {
        setErrorMessage(data.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i!");
      }
    } catch (err) {
      console.error(err);
      setErrorMessage("L·ªói k·∫øt n·ªëi backend.");
    }
  };

  return (
    <div className="register-section" style={{position:'relative', overflow:'hidden'}}>
      
      <div className="register-cloud"></div>
      <div className="register-cloud register-cloud-2"></div>
      <div className="register-container">
        <div className="register-wrapper">
          <div className="register-header">
            <img src="/src/assets/img1/android-chrome-192x192.png" alt="Logo" className="logo" />
            <h2>NoSmoke</h2>
            <p>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh kh√¥ng kh√≥i thu·ªëc c·ªßa b·∫°n ngay h√¥m nay</p>
          </div>

          <div className="register-box">
            

            <form className="register-form" onSubmit={handleSubmit}>
              {successMessage && <div style={{color:'green',marginBottom:8,fontWeight:600}}>{successMessage}</div>}
              {errorMessage && <div style={{color:'red',marginBottom:8,fontWeight:600}}>{errorMessage}</div>}

              <div className="form-group">
                <label htmlFor="name">H·ªç v√† t√™n</label>
                <input type="text" name="name" id="name" placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  value={formData.name} onChange={handleChange}  />
                <div style={{ minHeight: '20px', marginTop: '4px' }}>
                  {validationErrors.name && <span style={{ color: 'red', fontSize: '14px' }}>{validationErrors.name}</span>}
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="username">T√™n ƒêƒÉng Nh·∫≠p</label>
                <input type="text" name="username" id="username" placeholder="Nh·∫≠p T√™n ƒêƒÉng Nh·∫≠p"
                  value={formData.username} onChange={handleChange}  />
                <div style={{ minHeight: '20px', marginTop: '4px' }}>
                  {validationErrors.username && <span style={{ color: 'red', fontSize: '14px' }}>{validationErrors.username}</span>}
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="email">Email</label>
                <input type="email" name="email" id="email" placeholder="example@gmail.com"
                  value={formData.email} onChange={handleChange}  />
                <div style={{ minHeight: '20px', marginTop: '4px', marginBottom: '20px', display: 'block', width: '100%' }}>
                  {validationErrors.email && <span style={{ color: 'red', fontSize: '14px' }}>{validationErrors.email}</span>}
                </div>
              </div>

              <div className="register-input-group" style={{ display: 'flex', gap: '16px', flexWrap: 'wrap' }}>
                <div className="form-group half-width" style={{ position: 'relative', marginBottom: '30px', minWidth: '180px', flex: 1 }}>
                  <label htmlFor="password">M·∫≠t kh·∫©u</label>
                  <input
                    type={showPassword ? "text" : "password"}
                    name="password"
                    id="password"
                    value={formData.password}
                    onChange={handleChange}
                    style={{ paddingRight: '36px' }}
                  />
                  <span
                    onClick={() => setShowPassword(prev => !prev)}
                    className="password-toggle-icon"
                    tabIndex={0}
                    aria-label={showPassword ? '·∫®n m·∫≠t kh·∫©u' : 'Hi·ªán m·∫≠t kh·∫©u'}
                  >
                    {showPassword ? <FiEye size={18} /> : <FiEyeOff size={18} />}
                  </span>
                  <div style={{ minHeight: '20px', marginTop: '4px', marginBottom: '0', display: 'block', width: '100%' }}>
                    {validationErrors.password && <span style={{ color: 'red', fontSize: '14px' }}>{validationErrors.password}</span>}
                  </div>
                </div>

                <div className="form-group half-width" style={{ position: 'relative', marginBottom: '30px', minWidth: '180px', flex: 1 }}>
                  <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                  <input
                    type={showConfirmPassword ? "text" : "password"}
                    name="confirmPassword"
                    id="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleChange}
                    style={{ paddingRight: '36px' }}
                  />
                  <span
                    onClick={() => setShowConfirmPassword(prev => !prev)}
                    className="password-toggle-icon"
                    tabIndex={0}
                    aria-label={showConfirmPassword ? '·∫®n m·∫≠t kh·∫©u' : 'Hi·ªán m·∫≠t kh·∫©u'}
                  >
                    {showConfirmPassword ? <FiEye size={18} /> : <FiEyeOff size={18} />}
                  </span>
                  <div style={{ minHeight: '20px', marginTop: '4px', marginBottom: '0', display: 'block', width: '100%' }}>
                    {validationErrors.confirmPassword && <span style={{ color: 'red', fontSize: '14px' }}>{validationErrors.confirmPassword}</span>}
                  </div>
                </div>
              </div>

              <div className="register-checkbox" style={{ marginTop: '10px' }}>
                <label htmlFor="agree">
                  <input type="checkbox" name="agree" checked={formData.agree} onChange={handleChange} />
                  <span className="custom-box"></span>
                  T√¥i ƒë·ªìng √Ω v·ªõi <a href="#" onClick={e => { e.preventDefault(); setShowTermsModal(true); }}>ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a> v√† <a href="#" onClick={e => { e.preventDefault(); setShowPrivacyModal(true); }}>Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
                </label>
                {validationErrors.agree && (
                  <div style={{ color: 'red', marginTop: 4, fontSize: '14px' }}>{validationErrors.agree}</div>
                )}
              </div>

              <button type="submit" className="register-button">ƒêƒÉng k√Ω</button>

              <p className="register-login">ƒê√£ c√≥ t√†i kho·∫£n? <a href="/login" onClick={e => { e.preventDefault(); navigate('/login'); }}>ƒêƒÉng nh·∫≠p ngay</a></p>
            </form>
          </div>
        </div>
      </div>

      
      {showTermsModal && (
  <Modal title="ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng" onClose={() => setShowTermsModal(false)}>
    <h4>1. M·ª•c ƒë√≠ch s·ª≠ d·ª•ng</h4>
    <p>
      N·ªÅn t·∫£ng ƒë∆∞·ª£c ph√°t tri·ªÉn nh·∫±m h·ªó tr·ª£ ng∆∞·ªùi d√πng trong h√†nh tr√¨nh cai thu·ªëc l√°, bao g·ªìm vi·ªác l·∫≠p k·∫ø ho·∫°ch b·ªè thu·ªëc, theo d√µi ti·∫øn tr√¨nh, nh·∫≠n th√¥ng b√°o ƒë·ªông vi√™n v√† k·∫øt n·ªëi c·ªông ƒë·ªìng.
    </p>

    <h4>2. Tr√°ch nhi·ªám c·ªßa ng∆∞·ªùi d√πng</h4>
    <ul>
      <li>Kh√¥ng cung c·∫•p th√¥ng tin sai l·ªách khi ƒëƒÉng k√Ω t√†i kho·∫£n.</li>
      <li>Kh√¥ng ƒëƒÉng t·∫£i n·ªôi dung g√¢y h·∫°i, x√∫c ph·∫°m, ho·∫∑c tr√°i ph√°p lu·∫≠t.</li>
      <li>Kh√¥ng s·ª≠ d·ª•ng n·ªÅn t·∫£ng cho m·ª•c ƒë√≠ch gian l·∫≠n ho·∫∑c th∆∞∆°ng m·∫°i tr√°i ph√©p.</li>
    </ul>

    <h4>3. Quy·ªÅn c·ªßa n·ªÅn t·∫£ng</h4>
    <ul>
      <li>C√≥ quy·ªÅn kh√≥a t√†i kho·∫£n n·∫øu ng∆∞·ªùi d√πng vi ph·∫°m ƒëi·ªÅu kho·∫£n.</li>
      <li>C√≥ th·ªÉ thay ƒë·ªïi n·ªôi dung v√† ch·ª©c nƒÉng m√† kh√¥ng c·∫ßn b√°o tr∆∞·ªõc.</li>
    </ul>

    <h4>4. Mi·ªÖn tr·ª´ tr√°ch nhi·ªám</h4>
    <p>
      N·ªÅn t·∫£ng kh√¥ng thay th·∫ø t∆∞ v·∫•n y t·∫ø chuy√™n m√¥n. Ng∆∞·ªùi d√πng n√™n tham kh·∫£o b√°c sƒ© n·∫øu c·∫ßn h·ªó tr·ª£ y t·∫ø c·ª• th·ªÉ.
    </p>
  </Modal>
)}


      
      {showPrivacyModal && (
  <Modal title="Ch√≠nh s√°ch b·∫£o m·∫≠t" onClose={() => setShowPrivacyModal(false)}>
    <h4>1. Th√¥ng tin thu th·∫≠p</h4>
    <p>Ch√∫ng t√¥i c√≥ th·ªÉ thu th·∫≠p c√°c th√¥ng tin sau:</p>
    <ul>
      <li>H·ªç t√™n, email, t√™n ƒëƒÉng nh·∫≠p, m·∫≠t kh·∫©u</li>
      <li>Th√¥ng tin ti·∫øn tr√¨nh cai thu·ªëc</li>
      <li>Th√¥ng tin h√†nh vi s·ª≠ d·ª•ng (·∫©n danh)</li>
    </ul>

    <h4>2. M·ª•c ƒë√≠ch s·ª≠ d·ª•ng th√¥ng tin</h4>
    <ul>
      <li>Cung c·∫•p v√† c·∫£i thi·ªán d·ªãch v·ª•</li>
      <li>G·ª≠i th√¥ng b√°o, l·ªùi nh·∫Øc v√† l·ªùi khuy√™n</li>
      <li>H·ªó tr·ª£ k·ªπ thu·∫≠t v√† ph·∫£n h·ªìi ng∆∞·ªùi d√πng</li>
    </ul>

    <h4>3. B·∫£o m·∫≠t v√† chia s·∫ª th√¥ng tin</h4>
    <ul>
      <li>Th√¥ng tin c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t b·∫±ng c√°c bi·ªán ph√°p k·ªπ thu·∫≠t ph√π h·ª£p.</li>
      <li>Ch√∫ng t√¥i kh√¥ng chia s·∫ª d·ªØ li·ªáu c√° nh√¢n cho b√™n th·ª© ba, tr·ª´ khi c√≥ s·ª± ƒë·ªìng √Ω c·ªßa b·∫°n ho·∫∑c theo y√™u c·∫ßu ph√°p lu·∫≠t.</li>
    </ul>

    <h4>4. Quy·ªÅn c·ªßa ng∆∞·ªùi d√πng</h4>
    <ul>
      <li>C√≥ th·ªÉ xem, ch·ªânh s·ª≠a ho·∫∑c y√™u c·∫ßu x√≥a th√¥ng tin c√° nh√¢n.</li>
      <li>C√≥ th·ªÉ y√™u c·∫ßu x√≥a t√†i kho·∫£n b·∫•t c·ª© l√∫c n√†o.</li>
    </ul>
  </Modal>
)}

    </div>
  );
}

export default Register;

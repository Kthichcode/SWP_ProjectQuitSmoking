import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import axiosInstance from '../../../axiosInstance';
import '../assets/CSS/PaymentResult.css';
import { AiOutlineCheckCircle, AiOutlineCloseCircle, AiOutlineHome } from 'react-icons/ai';

function PaymentResult() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [paymentStatus, setPaymentStatus] = useState('processing');
  const [paymentInfo, setPaymentInfo] = useState({});

  useEffect(() => {
    // L·∫•y th√¥ng tin t·ª´ URL params
    const responseCode = searchParams.get('vnp_ResponseCode');
    const transactionId = searchParams.get('vnp_TxnRef');
    const amount = searchParams.get('vnp_Amount');
    const orderInfo = searchParams.get('vnp_OrderInfo');
    const payDate = searchParams.get('vnp_PayDate');

    setPaymentInfo({
      responseCode,
      transactionId,
      amount: amount ? parseInt(amount) / 100 : 0, // VNPay tr·∫£ v·ªÅ amount * 100
      orderInfo,
      payDate
    });

    // X√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n
    if (responseCode === '00') {
      setPaymentStatus('success');
      // TODO: G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t membership cho user
    } else {
      setPaymentStatus('failed');
    }
    const verifyPayment = async () => {
    if (responseCode && transactionId) {
      try {
        const response = await axiosInstance.get('/api/payment/check-callback', {
          params: {
            vnp_TxnRef: transactionId,
            vnp_ResponseCode: responseCode
          }
        });
        console.log('Backend verification:', response.data);
      } catch (error) {
        console.error('Error verifying payment:', error);
      }
    }
  };
  
  verifyPayment();
  }, [searchParams]);

  const handleGoHome = () => {
    navigate('/', { replace: true });
  };

  const handleGoToProfile = () => {
    navigate('/profile', { replace: true });
  };

  const handleChooseCoach = () => {
    navigate('/coach-payment', { replace: true });
  };

  const formatAmount = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const formatDate = (dateString) => {
    if (!dateString) return '';
    // Format: yyyyMMddHHmmss -> dd/MM/yyyy HH:mm:ss
    const year = dateString.substring(0, 4);
    const month = dateString.substring(4, 6);
    const day = dateString.substring(6, 8);
    const hour = dateString.substring(8, 10);
    const minute = dateString.substring(10, 12);
    const second = dateString.substring(12, 14);
    return `${day}/${month}/${year} ${hour}:${minute}:${second}`;
  };

  return (
    <div className="payment-result-bg">
      <div className="payment-result-container">
        <div className="payment-result-card">
          {paymentStatus === 'success' ? (
            <>
              <div className="payment-result-icon success">
                <AiOutlineCheckCircle size={80} />
              </div>
              <h2 className="payment-result-title success">Thanh to√°n th√†nh c√¥ng! üéâ</h2>
              <p className="payment-result-message">
                Ch√∫c m·ª´ng! B·∫°n ƒë√£ n√¢ng c·∫•p g√≥i th√†nh vi√™n th√†nh c√¥ng.<br/>
                <strong>B∆∞·ªõc ti·∫øp theo: Ch·ªçn Coach chuy√™n nghi·ªáp ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh cai thu·ªëc!</strong>
              </p>
            </>
          ) : paymentStatus === 'failed' ? (
            <>
              <div className="payment-result-icon failed">
                <AiOutlineCloseCircle size={80} />
              </div>
              <h2 className="payment-result-title failed">Thanh to√°n th·∫•t b·∫°i!</h2>
              <p className="payment-result-message">
                Giao d·ªãch kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.
              </p>
            </>
          ) : (
            <>
              <div className="payment-result-icon processing">
                <div className="spinner"></div>
              </div>
              <h2 className="payment-result-title">ƒêang x·ª≠ l√Ω...</h2>
              <p className="payment-result-message">
                Vui l√≤ng ch·ªù trong gi√¢y l√°t
              </p>
            </>
          )}

          {paymentInfo.transactionId && (
            <div className="payment-details">
              <h3>Chi ti·∫øt giao d·ªãch</h3>
              <div className="detail-row">
                <span className="detail-label">M√£ giao d·ªãch:</span>
                <span className="detail-value">{paymentInfo.transactionId}</span>
              </div>
              {paymentInfo.amount > 0 && (
                <div className="detail-row">
                  <span className="detail-label">S·ªë ti·ªÅn:</span>
                  <span className="detail-value">{formatAmount(paymentInfo.amount)}</span>
                </div>
              )}
              {paymentInfo.orderInfo && (
                <div className="detail-row">
                  <span className="detail-label">Th√¥ng tin ƒë∆°n h√†ng:</span>
                  <span className="detail-value">{paymentInfo.orderInfo}</span>
                </div>
              )}
              {paymentInfo.payDate && (
                <div className="detail-row">
                  <span className="detail-label">Th·ªùi gian:</span>
                  <span className="detail-value">{formatDate(paymentInfo.payDate)}</span>
                </div>
              )}
            </div>
          )}

          <div className="payment-result-actions">
            {paymentStatus === 'success' ? (
              <>
                <button className="btn-choose-coach" onClick={handleChooseCoach}>
                  üèÜ Ch·ªçn Coach
                </button>
                <button className="btn-profile" onClick={handleGoToProfile}>
                  Xem h·ªì s∆°
                </button>
                <button className="btn-home secondary" onClick={handleGoHome}>
                  <AiOutlineHome size={20} />
                  V·ªÅ trang ch·ªß
                </button>
              </>
            ) : (
              <button className="btn-home" onClick={handleGoHome}>
                <AiOutlineHome size={20} />
                V·ªÅ trang ch·ªß
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default PaymentResult;

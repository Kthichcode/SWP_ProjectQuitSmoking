import React, { useEffect, useState } from 'react';
import axiosInstance from '../../axiosInstance';
import './QuitPlanSummary.css';

function QuitPlanSummary() {
  const [plans, setPlans] = useState([]);
  const [stages, setStages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    setLoading(true);
    Promise.all([
      axiosInstance.get('http://localhost:5175/api/quitplan/member'),
      axiosInstance.get('/api/quitplan/stages/my')
    ])
      .then(([plansRes, stagesRes]) => {
        // X·ª≠ l√Ω k·∫ø ho·∫°ch
        if (plansRes.data && Array.isArray(plansRes.data.data)) {
          setPlans(plansRes.data.data);
        } else {
          setPlans([]);
        }

        // X·ª≠ l√Ω giai ƒëo·∫°n
        if (Array.isArray(stagesRes.data)) {
          setStages(stagesRes.data);
        } else if (stagesRes.data && Array.isArray(stagesRes.data.data)) {
          setStages(stagesRes.data.data);
        } else {
          setStages([]);
        }

        setError('');
      })
      .catch(() => {
        setPlans([]);
        setStages([]);
        setError('Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu k·∫ø ho·∫°ch.');
      })
      .finally(() => setLoading(false));
  }, []);

  // Ki·ªÉm tra xem t·∫•t c·∫£ 3 giai ƒëo·∫°n ƒë√£ ho√†n th√†nh ch∆∞a
  const areAllStagesCompleted = () => {
    if (stages.length < 3) return false;
    return stages.every(stage => (stage.progressPercentage ?? 0) === 100 || stage.status === 'completed');
  };

  // X√°c ƒë·ªãnh tr·∫°ng th√°i t·ªïng th·ªÉ d·ª±a tr√™n giai ƒëo·∫°n
  const getOverallStatus = () => {
    if (stages.length === 0) return 'Ch∆∞a b·∫Øt ƒë·∫ßu';
    
    // Ch·ªâ hi·ªÉn th·ªã "Ho√†n th√†nh" khi c·∫£ 3 giai ƒëo·∫°n ƒë·ªÅu ho√†n th√†nh
    if (areAllStagesCompleted()) {
      return 'Ho√†n th√†nh';
    }
    
    // Ki·ªÉm tra c√≥ giai ƒëo·∫°n n√†o ƒëang active kh√¥ng
    const hasActiveStage = stages.some(stage => stage.status === 'active');
    if (hasActiveStage) {
      return 'ƒêang th·ª±c hi·ªán';
    }
    
    // Ki·ªÉm tra c√≥ giai ƒëo·∫°n n√†o b·ªã cancelled kh√¥ng
    const hasCancelledStage = stages.some(stage => stage.status === 'cancelled');
    if (hasCancelledStage) {
      return 'C√≥ giai ƒëo·∫°n th·∫•t b·∫°i';
    }
    
    return 'ƒêang ch·ªù';
  };

  if (loading) return <div className="quitplan-summary-loading">ƒêang t·∫£i k·∫ø ho·∫°ch...</div>;
  if (error) return <div className="quitplan-summary-error">{error}</div>;
  if (!plans.length) return <div className="quitplan-summary-empty">Ch∆∞a c√≥ k·∫ø ho·∫°ch n√†o.</div>;

  // Hi·ªÉn th·ªã ch·ªâ 1 k·∫ø ho·∫°ch m·ªõi nh·∫•t (n·∫øu c√≥ nhi·ªÅu)
  const plan = plans[0];

  return (
    <div className="quitplan-summary-card">
      <div className="quitplan-summary-title">
        <span className="quitplan-summary-icon">üéØ</span>
        <span className="quitplan-summary-heading">K·∫ø ho·∫°ch cai thu·ªëc</span>
      </div>
      <div className="quitplan-summary-content">
        <div className="quitplan-summary-row">
          <div className="quitplan-summary-label">Tr·∫°ng th√°i</div>
          <div className="quitplan-summary-value" style={{
            color: areAllStagesCompleted() ? '#27ae60' : 
                   getOverallStatus() === 'ƒêang th·ª±c hi·ªán' ? '#3498db' : 
                   getOverallStatus() === 'C√≥ giai ƒëo·∫°n th·∫•t b·∫°i' ? '#e74c3c' : '#666',
            fontWeight: areAllStagesCompleted() ? '600' : '500'
          }}>
            {getOverallStatus()}
            
          </div>
        </div>
        <div className="quitplan-summary-row">
          <div className="quitplan-summary-label">L√Ω do cai thu·ªëc</div>
          <div className="quitplan-summary-value">{plan.reasonToQuit}</div>
        </div>
        <div className="quitplan-summary-row">
          <div className="quitplan-summary-label">T·ªïng s·ªë giai ƒëo·∫°n</div>
          <div className="quitplan-summary-value">{plan.totalStages} giai ƒëo·∫°n</div>
        </div>
        <div className="quitplan-summary-row">
          <div className="quitplan-summary-label">Ng√†y t·∫°o</div>
          <div className="quitplan-summary-value">{plan.createdAt && (new Date(plan.createdAt).toLocaleDateString('vi-VN'))}</div>
        </div>
        <div className="quitplan-summary-row">
          <div className="quitplan-summary-label">M·ª•c ti√™u ch√≠nh</div>
          <div className="quitplan-summary-value">{plan.goal}</div>
        </div>
      </div>
    </div>
  );
}

export default QuitPlanSummary;

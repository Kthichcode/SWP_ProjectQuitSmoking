import React, { useState, useEffect } from 'react';
import ConfirmModal from '../components/ConfirmModal';
import { useParams, useNavigate } from 'react-router-dom';
import axiosInstance from '../../axiosInstance';
import '../assets/CSS/CoachProfile.css';
import Header from './Header';

function CoachProfile() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [coach, setCoach] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [tab, setTab] = useState('overview');
  const [reviews, setReviews] = useState([]);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews, setTotalReviews] = useState(0);

  console.log('CoachProfile - ID from params:', id);

  useEffect(() => {
    if (id) {
      console.log('Fetching coach profile for ID:', id);
      fetchCoachProfile();
      fetchCoachReviews(id);
    }
  }, [id]);

  const fetchCoachReviews = async (coachId) => {
    try {
      const response = await axiosInstance.get(`http://localhost:5175/api/coach-reviews/public/coach/${coachId}`);
      if (response.data) {
        setReviews(response.data.reviews || []);
        setAverageRating(response.data.averageRating || 0);
        setTotalReviews(response.data.totalReviews || 0);
      }
    } catch (error) {
      setReviews([]);
      setAverageRating(0);
      setTotalReviews(0);
    }
  };

  const fetchCoachProfile = async () => {
    try {
      setLoading(true);
      setError('');
      
      // Check if user is authenticated
      const token = localStorage.getItem('token');
      console.log('Token exists:', !!token);
      console.log('Making API call to:', `/api/coach/${id}`);
      
      // Try different approach - get all coaches first and find the one we need
      try {
        const response = await axiosInstance.get(`/api/coach/${id}`);
        console.log('Direct API response:', response.data);

        if (response.data.status === 'success') {
          setCoach(response.data.data);
          console.log('Coach data set:', response.data.data);
        } else {
          setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin coach');
        }
      } catch (directError) {
        console.log('Direct call failed, trying getAllCoachProfiles');
        // Fallback: get all coaches and find the one we need
        const allCoachesResponse = await axiosInstance.get('/api/coach/getAllCoachProfiles');
        
        if (allCoachesResponse.data.status === 'success') {
          const coaches = allCoachesResponse.data.data;
          const targetCoach = coaches.find(coach => coach.userId.toString() === id.toString());
          
          if (targetCoach) {
            setCoach(targetCoach);
            console.log('Found coach in list:', targetCoach);
          } else {
            setError('Kh√¥ng t√¨m th·∫•y coach n√†y');
          }
        } else {
          throw new Error('Cannot fetch coaches list');
        }
      }
    } catch (error) {
      console.error('Error fetching coach profile:', error);
      console.log('Error response:', error.response);
      console.log('Error status:', error.response?.status);
      
      if (error.response?.status === 401) {
        setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        // Redirect to login after a delay
        setTimeout(() => {
          navigate('/login');
        }, 2000);
      } else if (error.response?.status === 404) {
        setError('Kh√¥ng t√¨m th·∫•y coach n√†y');
      } else {
        setError('L·ªói khi t·∫£i th√¥ng tin coach');
      }
    } finally {
      setLoading(false);
    }
  };

  // X·ª≠ l√Ω ch·ªçn coach v·ªõi modal x√°c nh·∫≠n
  const [confirmOpen, setConfirmOpen] = useState(false);
  const [pendingCoach, setPendingCoach] = useState(null);

  const handleSelectCoach = (coach) => {
    setPendingCoach(coach);
    setConfirmOpen(true);
  };

  const handleConfirmSelectCoach = async () => {
    if (!pendingCoach) return;
    const coachId = pendingCoach.userId || pendingCoach.id;
    let selectionId = null;
    try {
      const response = await axiosInstance.get(`/api/users/members/selection-with-coach/${coachId}`);
      if (response.data?.status === 'success' && response.data.data?.selectionId) {
        selectionId = response.data.data.selectionId;
      }
    } catch (e) {}
    setConfirmOpen(false);
    setPendingCoach(null);
    navigate('/progress', {
      state: {
        selectionId: selectionId || undefined,
        coachId: coachId
      }
    });
  };

  if (loading) {
    return (
      <>
        <Header />
        <div className="coach-profile-bg">
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>ƒêang t·∫£i th√¥ng tin coach...</p>
          </div>
        </div>
      </>
    );
  }

  if (error || !coach) {
    return (
      <>
        <Header />
        <div className="coach-profile-bg">
          <div className="error-container">
            <div className="error-message">
              <h3>üòî {error || 'Kh√¥ng t√¨m th·∫•y h·ªì s∆° coach'}</h3>
              <button className="coach-profile-btn-back" onClick={() => navigate(-1)}>
                <span style={{ fontSize: 20, marginRight: 8, verticalAlign: 'middle', marginTop: 50 }}>‚Üê</span>
                Quay l·∫°i danh s√°ch
              </button>
            </div>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Header />
      <div className="coach-profile-bg">
        <button className="coach-profile-btn-back" onClick={() => navigate(-1)}>
          <span style={{ fontSize: 20, marginRight: 8, verticalAlign: 'middle' }}>‚Üê</span>
          Quay l·∫°i danh s√°ch
        </button>
        <div className="coach-profile-container">
          <div className="coach-profile-header">
            <div className="coach-profile-avatar">
              {coach.imageUrl ? (
                <img
                  src={`data:image/jpeg;base64,${coach.imageUrl}`}
                  alt="avatar"
                  style={{ width: 90, height: 90, objectFit: 'cover', borderRadius: '50%', border: '1px solid #fff', background: '#fff' }}
                />
              ) : (
                coach.fullName ? coach.fullName.charAt(0).toUpperCase() : 'C'
              )}
            </div>
            <div style={{ flex: 1 }}>
              <div className="coach-profile-title">{coach.qualification || 'Coach'} {coach.fullName}</div>
              <div className="coach-profile-rating-row">
                
                <span className="coach-profile-exp">{coach.yearsOfExperience || 'N/A'} nƒÉm kinh nghi·ªám</span>
                <span className="coach-profile-status online">C√≥ s·∫µn</span>
              </div>
              <div className="coach-profile-badges">
                {coach.specialization && (
                  <span>{coach.specialization}</span>
                )}
              </div>
              <div className="coach-profile-desc">{coach.bio || 'Chuy√™n gia t∆∞ v·∫•n cai thu·ªëc l√° v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám'}</div>
              <div style={{marginTop: 10, color: 'black', fontSize: 15}}>
                <b>Email:</b> {coach.email || 'N/A'}
              </div>
            </div>
          </div>
          
          

          
          

          <div className="coach-profile-tabs">
            <button className={tab === 'overview' ? 'active' : ''} onClick={() => setTab('overview')}>T·ªïng quan</button>
            <button className={tab === 'method' ? 'active' : ''} onClick={() => setTab('method')}>Ph∆∞∆°ng ph√°p</button>
            <button className={tab === 'review' ? 'active' : ''} onClick={() => setTab('review')}>ƒê√°nh gi√°</button>
            <button className={tab === 'contact' ? 'active' : ''} onClick={() => setTab('contact')}>Li√™n h·ªá</button>
          </div>
          <div className="coach-profile-info">
            {tab === 'overview' && (
              <div className="coach-profile-info-flex">
                <div className="coach-profile-info-block">
                  <div className="coach-profile-info-block-title">Lƒ©nh v·ª±c chuy√™n m√¥n</div>
                  <div>
                    {coach.specialization ? (
                      <span className="coach-profile-specialty">{coach.specialization}</span>
                    ) : (
                      <span className="coach-profile-specialty">T∆∞ v·∫•n cai thu·ªëc l√°</span>
                    )}
                  </div>
                </div>
                <div className="coach-profile-info-block">
                  <div className="coach-profile-info-block-title">Th√¥ng tin coach</div>
                  <div><strong>Kinh nghi·ªám:</strong> {coach.yearsOfExperience || 'N/A'} nƒÉm</div>
                  
                  <div style={{ marginTop: 8 }}>
                    <span style={{ color: '#0ea5e9', fontWeight: 600 }}>Ph·∫£n h·ªìi nhanh ch√≥ng v√† chuy√™n nghi·ªáp</span>
                  </div>
                </div>
              </div>
            )}
            {tab === 'method' && (
              <div style={{fontSize: 16}}>
                
                {coach.bio || 'Coach chuy√™n nghi·ªáp v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c t∆∞ v·∫•n cai thu·ªëc l√°. √Åp d·ª•ng c√°c ph∆∞∆°ng ph√°p khoa h·ªçc hi·ªán ƒë·∫°i ƒë·ªÉ gi√∫p kh√°ch h√†ng ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u cai thu·ªëc th√†nh c√¥ng.'}
              </div>
            )}
            {tab === 'review' && (
              <div style={{fontSize: 16}}>
                <b>ƒê√°nh gi√° t·ª´ kh√°ch h√†ng:</b>
                <div style={{marginTop: 8}}>
                  <span>Trung b√¨nh: <b>{averageRating.toFixed(1)}</b>/5 ‚≠ê ({totalReviews} ƒë√°nh gi√°)</span>
                </div>
                <ul style={{marginTop: 8}}>
                  {reviews.length > 0 ? (
                    reviews.map((review, idx) => (
                      <li key={idx}>
                        <span style={{color:'#f59e42'}}>‚≠ê {review.rating}</span> - {review.comment}
                        <br/>
                        <span style={{fontSize:13, color:'#888'}}>B·ªüi: {review.reviewerName || '·∫®n danh'} {review.createdAt ? `(${new Date(review.createdAt).toLocaleDateString()})` : ''}</span>
                      </li>
                    ))
                  ) : (
                    <li>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o cho coach n√†y.</li>
                  )}
                </ul>
              </div>
            )}
            {tab === 'contact' && (
              <div style={{fontSize: 16}}>
                <b>Li√™n h·ªá tr·ª±c ti·∫øp:</b>
                <div>Email: <a href={`mailto:${coach.email || ''}`}>{coach.email || 'N/A'}</a></div>
                
                <div style={{marginTop: 10, color: '#666'}}>
                  Sau khi ch·ªçn coach, b·∫°n c√≥ th·ªÉ nh·∫Øn tin tr·ª±c ti·∫øp trong trang ti·∫øn tr√¨nh cai thu·ªëc.
                </div>
              </div>
            )}
          </div>
          {/* Action buttons */}
          <div className="coach-profile-actions">
            <button className="btn-select-coach" onClick={() => handleSelectCoach(coach)}>
              ‚úì Ch·ªçn Coach n√†y
            </button>
          </div>
          <ConfirmModal
            open={confirmOpen}
            title="X√°c nh·∫≠n ch·ªçn coach"
            message={pendingCoach ? `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·ªçn coach \"${pendingCoach.fullName}\" ƒë·ªÉ ƒë·ªìng h√†nh kh√¥ng?\nSau khi ch·ªçn, b·∫°n s·∫Ω b·∫Øt ƒë·∫ßu h√†nh tr√¨nh c√πng coach n√†y.` : ''}
            onConfirm={handleConfirmSelectCoach}
            onCancel={() => { setConfirmOpen(false); setPendingCoach(null); }}
          />
        </div>
      </div>
    </>
  );
}

export default CoachProfile;
